import os
import io
import re
import threading
import sqlite3
import uuid


import telebot
from telebot import types
from keyboards import done_inline_keyboard
from keyboards import manage_photo_keyboard
from database import save_rating, get_ratings_for_user
from keyboards import main_menu_keyboard


from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputFile
from telebot.apihelper import ApiTelegramException


from database import (
    init_db, user_exists, create_user, update_user_main, get_user_data,
    update_sozhitel_info, update_tarif_info,
    create_application, get_applications_by_user, get_application,
    update_application, delete_application, add_application_photo,
    get_application_photos, set_application_status, get_pending_applications,
    get_average_rating, count_applications_by_user, update_rating, get_ratings_by_user, 
    add_response, DB_NAME  # –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤
)
from keyboards import (
    get_role_keyboard, get_category_keyboard, get_district_keyboard, get_operator_keyboard,
    main_menu_keyboard, profile_edit_keyboard, my_applications_keyboard,
    confirm_keyboard, search_category_keyboard, admin_inline_buttons,
    create_app_keyboard, edit_contact_keyboard, recipient_keyboard,
    get_search_actions_keyboard  # –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
)

# ========== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (State Management) ==========
STATE_NONE = 0
STATE_SHOW_MY_APPS = 1000
STATE_WAITING_FULLNAME = 1
STATE_WAITING_LASTNAME = 2
STATE_WAITING_PHONE = 3
STATE_WAITING_ROLE = 4
STATE_WAITING_CATEGORY = 5
STATE_WAITING_DISTRICT = 6
STATE_WAITING_RENTPRICE = 7
STATE_WAITING_COMMENT = 8
STATE_WAITING_OPERATOR = 9
STATE_WAITING_TARIFFPRICE = 10
STATE_WAITING_DESCRIPTION = 11
STATE_WAITING_MONTHLY = 12
STATE_WAITING_PAYDAY = 13

STATE_APP_CHOOSE = 110
STATE_APP_EDIT = 111
STATE_APP_EDIT_TITLE = 112
STATE_APP_EDIT_DETAILS = 113

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (Friendly Review Flow) ---
STATE_RATING_USER_ID = 120   # –∂–¥—ë–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ç–∑—ã–≤
STATE_RATING_MESSAGE = 121   # –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
STATE_PHOTO_MANAGE = 902
temp_photos_for_review = {}  # (user_id, app_id): [list of photo paths]


STATE_PHOTO_ADD_CONFIRM = 903
STATE_CONFIRM_PHOTOS_SEND = 904
STATE_APP_EDIT_CONFIRM = 114




STATE_ADD_PHOTO_PROCESS = 901

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ---
STATE_SEARCH_CHOOSE_CAT = 200
STATE_SEARCH_DISTRICT = 201
STATE_SEARCH_OPERATOR = 202

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ ---
STATE_APP_CHOOSE_TYPE = 300
STATE_APP_SOZHI_DISTRICT = 301
STATE_APP_SOZHI_TITLE = 302
STATE_APP_SOZHI_DETAILS = 303
STATE_APP_SOZHI_PHOTOS = 304
STATE_APP_TARIF_OPERATOR = 305
STATE_APP_TARIF_TITLE = 306
STATE_APP_TARIF_DETAILS = 307
STATE_APP_TARIF_PHOTOS = 308
STATE_APP_CONFIRM = 309

# --- –ú–µ–Ω—é ¬´–ü–æ–ª—É—á–∞—Ç–µ–ª—å¬ª (–¥–ª—è –ø–æ–∏—Å–∫–∞) ---
STATE_RECIPIENT_MENU = 400

# –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
STATE_SHOW_SEARCH_RESULTS = 777


STATE_EDIT_RATING_SELECT = 130
STATE_EDIT_RATING_INPUT = 131
STATE_EDIT_CONFIRM = 114



# –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–∫ –∑–∞—è–≤–æ–∫
pending_edits: dict[str, dict] = {}

# –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤/–æ—Ç–∑—ã–≤–æ–≤
pending_moderations: dict[str, dict] = {}


# –í —Ä–∞–∑–¥–µ–ª–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–æ–±–∞–≤—å—Ç–µ:
STATE_ASK_PHOTOS = "ask_photos"  # –≠—Ç–∞–ø –≤–æ–ø—Ä–æ—Å–∞ "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?"


# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_ADMINS = [6466622805, 925319869, 6625311475]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ id

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
STATE_SUPPORT_CHAT = "support_chat"

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∫—Ç–æ –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç)
support_active_chats = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram (–ø—Ä–∏–º–µ—Ä) ‚Äì —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üëÆ‚Äç‚ôÇÔ∏è
ADMIN_ID = 2001143425

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID
banned_users = set()

PHOTO_REVIEW_PENDING = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∑–∞—è–≤–æ–∫ üì∏
PHOTO_DIR = "user_photos"
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)


def register_handlers(bot: telebot.TeleBot):

        #1 –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
    @bot.message_handler(func=lambda m: m.from_user.id in banned_users)
    def blocked_user(msg: types.Message):
        bot.send_message(
            msg.chat.id,
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚Äî –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )

    #2 –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
    @bot.callback_query_handler(func=lambda c: c.from_user.id in banned_users)
    def blocked_callback(c: types.CallbackQuery):
        bot.answer_callback_query(
            c.id,
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            show_alert=True
        )


    @bot.message_handler(func=lambda m: m.text == "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∑—ã–≤–æ–≤")
    def send_rating_history_inline(msg: types.Message):
        user_id = msg.from_user.id
        # —Ç–µ–ø–µ—Ä—å ‚Äî –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª
        reviews = get_ratings_by_user(user_id)
        if not reviews:
            return bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=main_menu_keyboard())

        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤:</b>\n\n"
        for rid, target_id, score, comment in reviews:
            stars = "‚òÖ"*int(score) + ("¬Ω" if score - int(score) >= 0.5 else "")
            # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤
            u = get_user_data(target_id)
            name = f"{u.get('first_name','')} {u.get('last_name','')}".strip() or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"#{rid} ‚Äî –æ—Ç–∑—ã–≤ –æ <b>{name}</b>: {stars} ({score}/5)\n{comment}\n\n"

        kb = InlineKeyboardMarkup(row_width=1)
        for rid, _, _, _ in reviews:
            kb.add(InlineKeyboardButton(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å #{rid}", callback_data=f"edit_rating_{rid}"))
        kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_profile"))

        bot.send_message(user_id, text, parse_mode="HTML", reply_markup=kb)


    
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_rating_") or c.data=="back_profile")
    def rating_history_nav(c: types.CallbackQuery):
        user_id = c.from_user.id
        bot.answer_callback_query(c.id)

        if c.data == "back_profile":
            bot.delete_message(user_id, c.message.message_id)
            return bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=profile_edit_keyboard())

        rid = int(c.data.split("_",2)[2])
        bot.send_message(user_id,
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1‚Äì5) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–∞ #{rid}:",
            parse_mode="HTML")
        user_states[user_id] = {"stage": STATE_EDIT_RATING_INPUT, "rating_id": rid}



    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_rating_") or c.data=="back_profile")
    def rating_history_nav(c: types.CallbackQuery):
        user_id = c.from_user.id
        bot.answer_callback_query(c.id)
        if c.data=="back_profile":
            bot.delete_message(user_id, c.message.message_id)
            bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=profile_edit_keyboard())
            return
        rid = int(c.data.split("_",2)[2])
        bot.send_message(user_id,
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1‚Äì5) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–∞ #{rid}:",
            parse_mode="HTML")
        user_states[user_id] = {"stage": STATE_EDIT_RATING_INPUT, "rating_id": rid}


  

    def notify_admin_new_application(user_id, app_id, title, details, cat):
        from database import get_user_data, get_application_photos
        from keyboards import admin_inline_buttons
        import os
        from telebot import types

        user_info = get_user_data(user_id)
        username = user_info.get('username', '')
        username_text = f"@{username}" if username else "(–Ω–µ—Ç username)"
        admin_text = (
            f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id} (pending)\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_info.get('first_name', '')} {user_info.get('last_name', '')}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_info.get('phone', '')}</code>\n"
            f"ID: <code>{user_id}</code>\n"
            f"TG: {username_text}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: <b>{title}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {details}"
        )
        bot.send_message(
            ADMIN_ID,
            admin_text,
            reply_markup=admin_inline_buttons(app_id),
            parse_mode="HTML"
        )
        photos = get_application_photos(app_id)
        media = []
        for p in photos:
            if os.path.exists(p):
                with open(p, 'rb') as f:
                    media.append(types.InputMediaPhoto(f.read(), caption=f"–ó–∞—è–≤–∫–∞ #{app_id}"))
        if media:
            bot.send_media_group(ADMIN_ID, media)

    def notify_admin_edited_application(user_id, app_id):
        from database import get_user_data, get_application, get_application_photos
        import os
        from telebot import types

        user_info = get_user_data(user_id)
        username = user_info.get('username', '')
        username_text = f"@{username}" if username else "(–Ω–µ—Ç username)"
        app = get_application(user_id, app_id)
        if not app:
            return
        (db_id, cat, dist, op, title, details, status) = app
        admin_text = (
            f"‚ÄºÔ∏è <b>–ó–∞—è–≤–∫–∞ #{app_id} –±—ã–ª–∞ –ò–ó–ú–ï–ù–ï–ù–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_info.get('first_name', '')} {user_info.get('last_name', '')}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_info.get('phone', '')}</code>\n"
            f"ID: <code>{user_id}</code>\n"
            f"TG: {username_text}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: <b>{title}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {details}"
        )
        bot.send_message(
            ADMIN_ID,
            admin_text,
            parse_mode="HTML"
        )
        photos = get_application_photos(app_id)
        media = []
        for p in photos:
            if os.path.exists(p):
                with open(p, 'rb') as f:
                    media.append(types.InputMediaPhoto(f.read(), caption=f"–ó–∞—è–≤–∫–∞ #{app_id} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)"))
        if media:
            bot.send_media_group(ADMIN_ID, media)


    # ---------- –°—Ç–∞—Ä—Ç –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ----------
    @bot.message_handler(commands=['start'])
    def cmd_start(message: types.Message):
        init_db()
        user_id = message.from_user.id
        username = message.from_user.username
        if username:
            from database import update_user_username
            update_user_username(user_id, username)

        if user_exists(user_id):
            data = get_user_data(user_id)
            role = data.get("role", "")
            fname = data.get("first_name", "")
            bot.send_message(
                user_id,
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {fname}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard(role=role)
            )
            user_states[user_id] = STATE_NONE
        else:
            create_user(user_id)
            bot.send_message(
                user_id,
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. üòä\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ —Å—Ä–∞–∑—É –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                "–ü—Ä–∏–º–µ—Ä: <b>–ê–¥–∏–ª –ë–∞—Ç—ã—Ä—Ö–∞–Ω</b>",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )
            user_states[user_id] = STATE_WAITING_FULLNAME

    # ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ----------
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_FULLNAME)
    def reg_fullname(msg: types.Message):
        user_id = msg.from_user.id
        parts = msg.text.strip().split(None, 1)
        if len(parts) < 2:
            return bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–∏–ª –ë–∞—Ç—ã—Ä—Ö–∞–Ω"
            )
        first, last = parts
        update_user_main(user_id, "first_name", first)
        update_user_main(user_id, "last_name",  last)

        # ‚Äî –≤–æ—Ç —Ç—É—Ç –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
        bot.send_message(
            user_id,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –∏–∑ Telegram\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é:",
            reply_markup=markup
        )
        user_states[user_id] = STATE_WAITING_PHONE


    @bot.message_handler(content_types=['contact'],
                     func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_PHONE)
    def reg_phone_contact(msg: types.Message):
        user_id = msg.from_user.id
        phone = msg.contact.phone_number  # Telegram –¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø–ª—é—Å
        update_user_main(user_id, "phone", phone)
        user_states.pop(user_id, None)
        bot.send_message(
            user_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=main_menu_keyboard()
        )




    # ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –¢–µ–ª–µ—Ñ–æ–Ω -
    def is_valid_phone(phone: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞:
        - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 87 (11 —Ü–∏—Ñ—Ä) –∏–ª–∏ +77 (12 —Å–∏–º–≤–æ–ª–æ–≤);
        - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–ø–æ—Å–ª–µ +).
        """
        phone = phone.strip().replace(" ", "")

        if phone.startswith("87") and len(phone) == 11 and phone.isdigit():
            return True
        elif phone.startswith("+77") and len(phone) == 12 and phone[1:].isdigit():
            return True
        return False


    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_PHONE)
    def reg_phone(msg: types.Message):
        user_id = msg.from_user.id
        phone = msg.text.strip()

        if not is_valid_phone(phone):
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "87771234567 –∏–ª–∏ +77712345678",
                parse_mode="HTML"
            )
            return

        update_user_main(user_id, "phone", phone)
        user_states.pop(user_id, None)
        bot.send_message(
            user_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=main_menu_keyboard()
        )

   

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_COMMENT)
    def reg_comment(msg: types.Message):
        user_id = msg.from_user.id
        update_sozhitel_info(user_id, "comment", msg.text.strip())
        role = get_user_data(user_id).get("role", "")
        bot.send_message(
            user_id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ö–≤–∞—Ä—Ç–∏—Ä–∞) –æ–±–Ω–æ–≤–ª—ë–Ω. üéâ",
            reply_markup=main_menu_keyboard(role=role)
        )
        user_states[user_id] = STATE_NONE

    # ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¢–∞—Ä–∏—Ñ) ========
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_OPERATOR)
    def reg_operator(msg: types.Message):
        user_id = msg.from_user.id
        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. ‚Ü©Ô∏è",
                reply_markup=get_category_keyboard()
            )
            user_states[user_id] = STATE_WAITING_CATEGORY
            return

        update_tarif_info(user_id, "operator", msg.text.strip())
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞: üíµ")
        user_states[user_id] = STATE_WAITING_TARIFFPRICE

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_TARIFFPRICE)
    def reg_tariff_price(msg: types.Message):
        user_id = msg.from_user.id
        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. ‚Ü©Ô∏è",
                reply_markup=get_operator_keyboard()
            )
            user_states[user_id] = STATE_WAITING_OPERATOR
            return

        update_tarif_info(user_id, "tariff_price", msg.text.strip())
        bot.send_message(user_id, "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: üìù")
        user_states[user_id] = STATE_WAITING_DESCRIPTION

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_DESCRIPTION)
    def reg_description(msg: types.Message):
        user_id = msg.from_user.id
        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(user_id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞. ‚Ü©Ô∏è")
            user_states[user_id] = STATE_WAITING_TARIFFPRICE
            return

        update_tarif_info(user_id, "description", msg.text.strip())
        bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∑–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ? üí∏")
        user_states[user_id] = STATE_WAITING_MONTHLY

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_MONTHLY)
    def reg_monthly(msg: types.Message):
        user_id = msg.from_user.id
        update_tarif_info(user_id, "monthly", msg.text.strip())
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´5 —á–∏—Å–ª–æ¬ª): üìÜ")
        user_states[user_id] = STATE_WAITING_PAYDAY

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_WAITING_PAYDAY)
    def reg_payday(msg: types.Message):
        user_id = msg.from_user.id
        update_tarif_info(user_id, "pay_day", msg.text.strip())
        role = get_user_data(user_id).get("role", "")
        bot.send_message(
            user_id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¢–∞—Ä–∏—Ñ) –æ–±–Ω–æ–≤–ª—ë–Ω. üéâ",
            reply_markup=main_menu_keyboard(role=role)
        )
        user_states[user_id] = STATE_NONE

    # ---------- "–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é" (—Å–º–µ–Ω–∞ —Ä–æ–ª–∏) ----------
    # @bot.message_handler(func=lambda m: m.text == "–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é")
   # def main_menu_role(msg: types.Message):
        user_id = msg.from_user.id
        update_user_main(user_id, "role", None)
        bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ: üë§",
            reply_markup=get_role_keyboard()
        )
        user_states[user_id] = STATE_WAITING_ROLE

    # ---------- "–ù–∞–∑–∞–¥" (–æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫) ----------
    @bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
    def go_back(msg: types.Message):
        user_id = msg.from_user.id
        role = get_user_data(user_id).get("role", "")
        bot.send_message(
            user_id,
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
            reply_markup=main_menu_keyboard(role=role)
        )
        user_states[user_id] = STATE_NONE
        
    
   





    # ---------- –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ----------
    @bot.message_handler(func=lambda m: m.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    def my_profile(msg: types.Message):
        user_id = msg.from_user.id
        data = get_user_data(user_id)

        if not data:
            bot.send_message(user_id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üöÄ")
            return

        avg = get_average_rating(user_id)

        if avg is None or avg == 0:
            rating_str = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        else:
            try:
                val = round(avg, 1)
                full = int(val)
                half = (val - full) >= 0.5
                stars = "‚òÖ" * full + ("¬Ω" if half else "")
                rating_str = f"{stars} / 5.0 (—Å—Ä–µ–¥–Ω–µ–µ {val})"
            except Exception as e:
                rating_str = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"
                print("–û—à–∏–±–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:", e)

        c_app = count_applications_by_user(user_id)
        text = (
            f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"–ò–º—è: {data.get('first_name','')}\n"
            f"–§–∞–º–∏–ª–∏—è: {data.get('last_name','')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
            f"–ó–∞—è–≤–æ–∫: {c_app}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {rating_str}"
        )
        bot.send_message(user_id, text, parse_mode="HTML", reply_markup=profile_edit_keyboard())

    # ---------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–ò–º—è, –§–∞–º–∏–ª–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω) ----------
    @bot.message_handler(func=lambda m: m.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    def edit_contact(msg: types.Message):
        user_id = msg.from_user.id
        bot.send_message(
            user_id,
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ: üîß",
            reply_markup=edit_contact_keyboard()
        )
        user_states[user_id] = 210  # STATE_EDIT_CONTACT_CHOICE

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 210)
    def choose_what_to_edit(msg: types.Message):
        user_id = msg.from_user.id
        text = msg.text.lower()
        if text == "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ‚úèÔ∏è")
            user_states[user_id] = 211
        elif text == "–∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é: ‚úèÔ∏è")
            user_states[user_id] = 212
        elif text == "–∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: üìû")
            user_states[user_id] = 213
        else:
            data = get_user_data(user_id)
            role = data.get("role", "")
            bot.send_message(
                user_id,
                "–û—Ç–º–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
                reply_markup=main_menu_keyboard(role=role)
            )
            user_states[user_id] = STATE_NONE

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 211)
    def process_new_firstname(msg: types.Message):
        user_id = msg.from_user.id
        update_user_main(user_id, "first_name", msg.text.strip())
        bot.send_message(
            user_id,
            "–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ",
            reply_markup=profile_edit_keyboard()
        )
        user_states[user_id] = STATE_NONE

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 212)
    def process_new_lastname(msg: types.Message):
        user_id = msg.from_user.id
        update_user_main(user_id, "last_name", msg.text.strip())
        bot.send_message(
            user_id,
            "–§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ",
            reply_markup=profile_edit_keyboard()
        )
        user_states[user_id] = STATE_NONE

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 213)
    def process_new_phone(msg: types.Message):
         user_id = msg.from_user.id
         phone = msg.text.strip().replace(" ", "")
         if not is_valid_phone(phone):
             bot.send_message(
                  user_id,
                  "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞...\n<code>+77712345678</code>",
                  parse_mode="HTML"
        )
             return
         update_user_main(user_id, "phone", phone)
         bot.send_message(user_id, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω! ‚úÖ", reply_markup=profile_edit_keyboard())
         user_states[user_id] = STATE_NONE

      
     

    # ---------- –ú–æ–∏ –∑–∞—è–≤–∫–∏ ----------
    @bot.message_handler(func=lambda m: m.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
    def my_apps(msg: types.Message):
        user_id = msg.from_user.id
        bot.send_message(
            user_id,
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏: üìë",
            reply_markup=my_applications_keyboard()
        )

    
     # ---------- "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ----------
    @bot.message_handler(func=lambda m: m.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")
    def list_apps_inline(msg: types.Message):
        user_id = msg.from_user.id
        apps = [a for a in get_applications_by_user(user_id) if a[6] in ("approved","revise")]
        if not apps:
            return bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=my_applications_keyboard())

        kb = InlineKeyboardMarkup(row_width=1)
        for aid,cat,dist,op,title,details,status in apps:
            kb.add(InlineKeyboardButton(f"#{aid} ¬´{title}¬ª", callback_data=f"open_app_{aid}"))
        kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_apps"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=kb)

        user_states[user_id] = {"stage": STATE_SHOW_MY_APPS, "apps": {a[0]: a for a in apps}}


    
    # 1) –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É¬ª ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ + –¥–µ—Ç–∞–ª–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ STATE_APP_EDIT
    @bot.callback_query_handler(func=lambda c: c.data.startswith("open_app_") or c.data == "back_apps")
    def open_app_by_button(c: types.CallbackQuery):
        user_id = c.from_user.id
        bot.answer_callback_query(c.id)

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫
        if c.data == "back_apps":
            bot.delete_message(user_id, c.message.message_id)
            bot.send_message(
                user_id,
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–æ–∫.",
                reply_markup=my_applications_keyboard()
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
        aid = int(c.data.split("_", 2)[2])
        app = user_states.get(user_id, {}).get("apps", {}).get(aid)
        if not app:
            return bot.send_message(user_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        # 1. –§–æ—Ç–æ (–∞–ª—å–±–æ–º–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å)
        photos = get_application_photos(aid)
        if photos:
            media = []
            for p in photos:
                if os.path.exists(p):
                    with open(p, 'rb') as f:
                        media.append(types.InputMediaPhoto(f.read()))
            bot.send_media_group(user_id, media)

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
        _, category, district, operator, title, details, status = app
        if category == "–∫–≤–∞—Ä—Ç–∏—Ä–∞":
            info = (
                f"<b>–ó–∞—è–≤–∫–∞ #{aid}</b>\n"
                f"üìÅ –ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
                f"üìå –†–∞–π–æ–Ω: {district}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {title}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {details}\n"
                f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status}"
            )
        else:
            info = (
                f"<b>–ó–∞—è–≤–∫–∞ #{aid}</b>\n"
                f"üìÅ –¢–∞—Ä–∏—Ñ\n"
                f"üì± –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: {title}\n"
                f"üìÖ –î–µ–Ω—å –æ–ø–ª–∞—Ç—ã: {details}\n"
                f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status}"
            )

        # 3. –í—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")
        kb.add("üóë –£–¥–∞–ª–∏—Ç—å", "–ù–∞–∑–∞–¥")
        bot.send_message(user_id, info, parse_mode="HTML", reply_markup=kb)

        # 4. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π
        user_states[user_id] = {"stage": STATE_APP_EDIT, "app_id": aid}

    


    # –ê–¥–º–∏–Ω: –û–¥–æ–±—Ä–∏—Ç—å / –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å / –û—Ç–∫–ª–æ–Ω–∏—Ç—å (–±–∞–Ω)
    @bot.callback_query_handler(func=lambda c: re.match(r'^(approve|reject|revise)_\d+$', c.data))
    def handle_admin_review(c: types.CallbackQuery):
        action, app_id_str = c.data.split("_", 1)
        app_id = int(app_id_str)

        # –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
        if action == "approve":
            new_status = "approved"
            user_msg = f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞."
        elif action == "revise":
            new_status = "revise"
            user_msg = f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É."
        else:  # reject
            new_status = "rejected"
            user_msg = f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚Äî –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        set_application_status(app_id, new_status)

        # –æ—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ callback
        bot.answer_callback_query(c.id, text=user_msg, show_alert=False)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        bot.edit_message_text(
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            text=f"–ó–∞—è–≤–∫–∞ #{app_id}: {user_msg}",
            reply_markup=None
        )

        # –Ω–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏
        conn = sqlite3.connect(DB_NAME)
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM applications WHERE id=?", (app_id,))
        row = cur.fetchone()
        conn.close()
        if not row:
            return
        user_id = row[0]

        # –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚Äî –±–∞–Ω–∏–º
        if new_status == "rejected":
            banned_users.add(user_id)

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        if new_status in ("approved", "revise"):
            bot.send_message(
                user_id,
                f"{user_msg}\n–ó–∞–π–¥–∏—Ç–µ –≤ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë —Å—Ç–∞—Ç—É—Å."
            )
        else:
            bot.send_message(
                user_id,
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. üòî"
            )

        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)


    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                and user_states[m.from_user.id].get("stage") == STATE_APP_EDIT)
    def manage_single_app(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]
        app_id = st["app_id"]
        text = msg.text.strip().lower()

        if text == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            # –ø–æ–ª—É—á–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä—è–º–æ –∏–∑ –±–∞–∑—ã
            row = get_application(user_id, app_id)  # (id, category, district, operator, title, details, status)
            _, category, _, _, _, _, _ = row
            # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å
            if category == "–∫–≤–∞—Ä—Ç–∏—Ä–∞":
                prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã:"
            else:
                prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞:"
            bot.send_message(user_id, prompt, reply_markup=types.ReplyKeyboardRemove())
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            user_states[user_id] = {
                "stage": STATE_APP_EDIT_TITLE,
                "app_id": app_id,
                "category": category
            }
            return

        elif text == "üñºÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ":
            user_states[user_id] = STATE_PHOTO_MANAGE
            user_states[(user_id, "app_id")] = app_id
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ:", reply_markup=manage_photo_keyboard())
            return

        elif text == "üóë —É–¥–∞–ª–∏—Ç—å":
            delete_application(user_id, app_id)
            bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{app_id} —É–¥–∞–ª–µ–Ω–∞. üóë", reply_markup=my_applications_keyboard())
            user_states[user_id] = STATE_NONE
            return

        elif text == "–Ω–∞–∑–∞–¥":
            bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–æ–∫.", reply_markup=my_applications_keyboard())
            user_states[user_id] = STATE_NONE
            return

        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")


    
    

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_APP_CHOOSE)
    def choose_app(msg: types.Message):
        user_id = msg.from_user.id
        if not msg.text.isdigit():
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID –∑–∞—è–≤–∫–∏). üî¢")
            return

        app_id = int(msg.text)
        row = get_application(user_id, app_id)
        if not row:
            bot.send_message(
                user_id,
                f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ‚ùå",
                reply_markup=my_applications_keyboard()
            )
            user_states[user_id] = STATE_NONE
            return

        (db_id, cat, dist, op, title, details, status) = row
        bot.send_message(
            user_id,
            f"–ó–∞—è–≤–∫–∞ #{db_id} [{status}] ({cat})\n"
            f"{title}\n{details}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n/edit ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n/delete ‚Äî —É–¥–∞–ª–∏—Ç—å\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å",
            reply_markup=my_applications_keyboard()
        )
        user_states[user_id] = {
            "stage": STATE_APP_EDIT,
            "app_id": db_id
        }

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ ===
    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                        and user_states[m.from_user.id].get("stage") == "MANAGE_APP")
    def manage_single_app(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]
        app_id = st.get("app_id")
        text = msg.text.lower()

        if text == "üóë —É–¥–∞–ª–∏—Ç—å":
            delete_application(user_id, app_id)
            bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{app_id} —É–¥–∞–ª–µ–Ω–∞. üóë", reply_markup=my_applications_keyboard())
            user_states[user_id] = STATE_NONE

        elif text == "–Ω–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            apps = get_applications_by_user(user_id)
            if not apps:
                bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. üòï", reply_markup=my_applications_keyboard())
                user_states[user_id] = STATE_NONE
                return

            user_states[user_id] = {
                "stage": "VIEW_APPS_LIST",
                "apps": apps
            }

            text = f"<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(apps)}</b>\n\n"
            for (app_id, cat, dist, op, title, details, status) in apps:
                text += f"üîπ <b>#{app_id}</b>: {title} ‚Äî <i>{cat}</i> ({status})\n"

            text += "\n–í–≤–µ–¥–∏—Ç–µ <b>ID –∑–∞—è–≤–∫–∏</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª."
            bot.send_message(user_id, text, parse_mode="HTML")

        elif text == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            # –ü–æ–∫–∞ –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏: ‚úèÔ∏è")
            st["stage"] = "EDIT_TITLE"



        elif text == "üñºÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ":
            user_states[user_id] = STATE_PHOTO_MANAGE
            user_states[(user_id, 'app_id')] = app_id
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ:", reply_markup=manage_photo_keyboard())

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_PHOTO_MANAGE)
    def manage_photo_action(msg: types.Message):

        user_id = msg.from_user.id
        text = msg.text.strip()
        app_id = user_states.get((user_id, 'app_id'))

        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
            # —É—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ
            user_states[user_id] = {
                "stage": STATE_ADD_PHOTO_PROCESS,
                "app_id": app_id,
                "new_photos": []
            }
            bot.send_message(
                user_id,
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 8 —Ñ–æ—Ç–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}. "
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–≥–æ—Ç–æ–≤¬ª (–ª—é–±—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º), "
                "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.",
                reply_markup=done_inline_keyboard()
            )
            return

        elif text == "‚ôªÔ∏è –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
            send_photo_delete_options(bot, user_id, app_id)
            bot.send_message(
                user_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏¬ª.",
                reply_markup=None
            )

        elif text == "–ù–∞–∑–∞–¥":
            from database import get_applications_by_user
            apps = get_applications_by_user(user_id)
            for app in apps:
                if app[0] == app_id:
                    (db_id, cat, dist, op, title, details, status) = app
                    info = (
                        f"<b>–ó–∞—è–≤–∫–∞ #{db_id}</b>\n"
                        f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
                        f"üìå –†–∞–π–æ–Ω: {dist or '-'}\n"
                        f"üì± –û–ø–µ—Ä–∞—Ç–æ—Ä: {op or '-'}\n"
                        f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                        f"üîç –û–ø–∏—Å–∞–Ω–∏–µ: {details}\n"
                        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status}"
                    )

                    # –î–æ–±–∞–≤–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    photos = get_application_photos(app_id)
                    media = []
                    for p in photos:
                        if os.path.exists(p):
                            with open(p, 'rb') as f:
                                media.append(types.InputMediaPhoto(f.read()))
                    if media:
                        bot.send_media_group(user_id, media)

                    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    kb.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")
                    kb.add("üóë –£–¥–∞–ª–∏—Ç—å", "–ù–∞–∑–∞–¥")
                    bot.send_message(user_id, info, parse_mode="HTML", reply_markup=kb)
                    user_states[user_id] = {
                        "stage": "MANAGE_APP",
                        "app_id": app_id
                    }
                    return
            bot.send_message(user_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            user_states[user_id] = STATE_NONE

    @bot.callback_query_handler(func=lambda call: call.data == "del_all_request")
    def confirm_delete_all(call):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="del_all_confirm"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="del_all_cancel")
        )
        bot.edit_message_text(
            "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "del_all_confirm")
    def do_delete_all(call):
        user_id = call.from_user.id
        app_id = user_states.get((user_id, 'app_id'))
        photos = get_application_photos(app_id)
        for p in photos:
            if os.path.exists(p):
                os.remove(p)
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("DELETE FROM application_photos WHERE application_id=?", (app_id,))
        bot.edit_message_text("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "del_all_cancel")
    def cancel_delete_all(call):
        bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                        and user_states[m.from_user.id].get("stage") == "EDIT_TITLE")
    def edit_title(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]
        st["new_title"] = msg.text.strip()
        st["stage"] = "EDIT_DETAILS"
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: üìù")

    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                        and user_states[m.from_user.id].get("stage") == "EDIT_DETAILS")
    def edit_details(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]
        new_title = st.get("new_title", "")
        new_details = msg.text.strip()
        app_id = st.get("app_id")

        update_application(user_id, app_id, new_title, new_details)

        bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=my_applications_keyboard())
        user_states[user_id] = STATE_NONE

    @bot.message_handler(commands=['edit'])
    def cmd_edit_app(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states.get(user_id)
        if not isinstance(st, dict) or st.get("stage") != STATE_APP_EDIT:
            return
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ‚úèÔ∏è")
        user_states[user_id] = {
            "stage": STATE_APP_EDIT_TITLE,
            "app_id": st["app_id"]
        }

    @bot.message_handler(commands=['delete'])
    def cmd_delete_app(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states.get(user_id)
        if not isinstance(st, dict) or st.get("stage") != STATE_APP_EDIT:
            return
        app_id = st["app_id"]
        delete_application(user_id, app_id)
        bot.send_message(
            user_id,
            f"–ó–∞—è–≤–∫–∞ #{app_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è",
            reply_markup=my_applications_keyboard()
        )
        user_states[user_id] = STATE_NONE

    @bot.message_handler(commands=['cancel'])
    def cmd_cancel_app(msg: types.Message):
        user_id = msg.from_user.id
        bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. üîô", reply_markup=my_applications_keyboard())
        user_states[user_id] = STATE_NONE

    
    
    #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª, –≤–≤—ë–ª –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:
    @bot.message_handler(
        func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                    and user_states[m.from_user.id].get("stage") == STATE_APP_EDIT_TITLE
    )
    def edit_app_title(msg: types.Message):
        user_id = msg.from_user.id
        new_title = msg.text.strip()
        st = user_states[user_id]
        st["new_title"] = new_title
        st["stage"]     = STATE_APP_EDIT_DETAILS
        bot.send_message(
            user_id,
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: üìù",
            reply_markup=types.ReplyKeyboardRemove()
        )


    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict) and user_states[m.from_user.id].get("stage") == STATE_APP_EDIT_DETAILS)
    def edit_app_details(msg: types.Message):
        user_id     = msg.from_user.id
        st          = user_states[user_id]
        app_id      = st["app_id"]
        new_title   = st["new_title"]
        new_details = msg.text.strip()

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mod_id = str(uuid.uuid4())
        pending_edits[mod_id] = {
            "user_id":     user_id,
            "app_id":      app_id,
            "new_title":   new_title,
            "new_details": new_details
        }

        # —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        text = (
            f"‚úèÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–∞–≤–∫–∏</b> –∫ –∑–∞—è–≤–∫–µ #{app_id}:\n\n"
            f"<b>–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {new_title}\n"
            f"<b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {new_details}"
        )
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_edit_{mod_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_edit_{mod_id}")
        )

        # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ
        for adm in SUPPORT_ADMINS:
            bot.send_message(adm, text, parse_mode="HTML", reply_markup=kb)

        # –æ–ø–æ–≤–µ—â–∞–µ–º –∞–≤—Ç–æ—Ä–∞
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∏ –ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
            reply_markup=my_applications_keyboard()
        )
        user_states[user_id] = STATE_NONE



    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ –ø—Ä–∞–≤–∫–∞–º
    @bot.callback_query_handler(func=lambda c: re.match(r'^(approve|reject)_edit_[\w-]+$', c.data))
    def handle_edit_moderation(c: types.CallbackQuery):
        action, _, mod_id = c.data.partition("_edit_")
        data = pending_edits.pop(mod_id, None)
        bot.answer_callback_query(c.id)

        if not data:
            return bot.send_message(c.from_user.id, "‚ö†Ô∏è –≠—Ç–∏ –ø—Ä–∞–≤–∫–∏ —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

        app_id    = data["app_id"]
        orig_user = data["user_id"]
        title     = data["new_title"]
        details   = data["new_details"]

        # –æ–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ
        for adm in SUPPORT_ADMINS:
            if adm != c.from_user.id:
                bot.send_message(
                    adm,
                    f"‚ö†Ô∏è –ê–¥–º–∏–Ω @{c.from_user.username} –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∞–≤–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{app_id}. –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è."
                )

        if action == "approve":
            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–ê–ñ–ù–û ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ approved, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –ü–æ–∏—Å–∫–µ
            set_application_status(app_id, "approved")
            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

            # –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            update_application(orig_user, app_id, title, details)
            bot.send_message(orig_user, f"‚úÖ –í–∞—à–∏ –ø—Ä–∞–≤–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{app_id} –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ú–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É –≤ –ø–æ–∏—Å–∫–µ.")
        else:
            bot.send_message(orig_user, f"‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –∞–¥–º–∏–Ω–∞
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)




    @bot.message_handler(func=lambda msg: isinstance(user_states.get(msg.from_user.id), dict) and user_states[msg.from_user.id].get("stage") == "EDIT_TITLE")
    def edit_title(msg: types.Message):
        user_id = msg.from_user.id
        new_title = msg.text.strip()

        st = user_states[user_id]
        app_id = st.get("app_id")
        update_application_title(app_id, new_title)
        bot.send_message(user_id, "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:")
        st["stage"] = "EDIT_DESCRIPTION"

    # ---------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ----------
    @bot.message_handler(func=lambda m: m.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    def create_app_menu(msg: types.Message):
        user_states[msg.from_user.id] = STATE_APP_CHOOSE_TYPE
        bot.send_message(
            msg.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å: üìù",
            reply_markup=create_app_keyboard()
        )

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_APP_CHOOSE_TYPE)
    def process_app_type(msg: types.Message):
        user_id = msg.from_user.id
        text = msg.text.lower()

        if text == "–∫–≤–∞—Ä—Ç–∏—Ä–∞":
            bot.send_message(
                user_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ ¬´–ö–≤–∞—Ä—Ç–∏—Ä–∞¬ª: üåç",
                reply_markup=get_district_keyboard()
            )
            user_states[user_id] = {
                "stage": "APP_SOZHI_DISTRICT",
                "category": "–∫–≤–∞—Ä—Ç–∏—Ä–∞",
                "photos": []
            }

        elif text == "—Ç–∞—Ä–∏—Ñ":
            bot.send_message(
                user_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ¬´–¢–∞—Ä–∏—Ñ¬ª: üì±",
                reply_markup=get_operator_keyboard()
            )
            user_states[user_id] = {
                "stage": "APP_TARIF_OPERATOR",
                "category": "—Ç–∞—Ä–∏—Ñ",
                "photos": []
            }

        elif text == "–Ω–∞–∑–∞–¥":
            role = get_user_data(user_id).get("role", "")
            bot.send_message(
                user_id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
                reply_markup=main_menu_keyboard(role=role)
            )
            user_states[user_id] = STATE_NONE

        else:
            bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ö–≤–∞—Ä—Ç–∏—Ä–∞¬ª, ¬´–¢–∞—Ä–∏—Ñ¬ª –∏–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª. ‚ùì"
            )

    # ---------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ "–ö–≤–∞—Ä—Ç–∏—Ä–∞" ----------
    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                     and user_states[m.from_user.id].get("stage") == "APP_SOZHI_DISTRICT")
    def create_app_sozhi_district(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]

        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏. ‚Ü©Ô∏è",
                reply_markup=create_app_keyboard()
            )
            user_states[user_id] = STATE_APP_CHOOSE_TYPE
            return

        st["district"] = msg.text.strip()
        st["stage"] = "APP_SOZHI_TITLE"
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É): üí∞")

    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                     and user_states[m.from_user.id].get("stage") == "APP_SOZHI_TITLE")
    def create_app_sozhi_title(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]

        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–∞–π–æ–Ω–∞. ‚Ü©Ô∏è",
                reply_markup=get_district_keyboard()
            )
            st["stage"] = "APP_SOZHI_DISTRICT"
            return

        st["title"] = msg.text
        st["stage"] = "APP_SOZHI_DETAILS"
        bot.send_message(user_id, "–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∂–∏–ª—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ä—è–¥–æ–º –º–µ—Ç—Ä–æ¬ª, ¬´2 –∫–æ–º–Ω–∞—Ç—ã¬ª –∏ —Ç.–ø.): üìù")

    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                     and user_states[m.from_user.id].get("stage") == "APP_SOZHI_DETAILS")
    def create_app_sozhi_details(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]

        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞—è–≤–∫–∏. ‚Ü©Ô∏è")
            st["stage"] = "APP_SOZHI_TITLE"
            return

        st["details"] = msg.text
        st["stage"] = "APP_SOZHI_PHOTOS"
        st["photos"] = []
        bot.send_message(
            user_id,
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 8 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>. üì∏",
            parse_mode="HTML",
            reply_markup=done_inline_keyboard()
        )

    # ---------- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ "–¢–∞—Ä–∏—Ñ" ----------
    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                    and user_states[m.from_user.id].get("stage") == "APP_TARIF_OPERATOR")
    def create_app_tarif_operator(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]

        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏. ‚Ü©Ô∏è",
                reply_markup=create_app_keyboard()
            )
            user_states[user_id] = STATE_APP_CHOOSE_TYPE
            return

        st["operator"] = msg.text.strip()
        st["stage"] = "APP_TARIF_TITLE"
        bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∑–∞ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ? üí∏")

    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                    and user_states[m.from_user.id].get("stage") == "APP_TARIF_TITLE")
    def create_app_tarif_title(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]

        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. ‚Ü©Ô∏è",
                reply_markup=get_operator_keyboard()
            )
            st["stage"] = "APP_TARIF_OPERATOR"
            return

        st["title"] = msg.text
        st["stage"] = "APP_TARIF_DETAILS"
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´5 —á–∏—Å–ª–æ¬ª): üìÜ")


    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                    and user_states[m.from_user.id].get("stage") == "APP_TARIF_DETAILS")
    def create_app_tarif_details(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]

        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞—è–≤–∫–∏. ‚Ü©Ô∏è")
            st["stage"] = "APP_TARIF_TITLE"
            return

        st["details"] = msg.text
        
        # –í–º–µ—Å—Ç–æ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã –ª–∏ –æ–Ω–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        
        bot.send_message(
            user_id,
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ç–∞—Ä–∏—Ñ—É? üì∏\n"
            "(–ï—Å–ª–∏ –¥–∞ - –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞¬ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 8 —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω–µ—Ç - ¬´–ù–µ—Ç¬ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)",
            reply_markup=markup
        )
        st["stage"] = STATE_ASK_PHOTOS
        st["photos"] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ


    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                 and user_states[m.from_user.id].get("stage") == STATE_ASK_PHOTOS)
    def handle_photo_choice(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]
        text = msg.text.lower()

        if text == "–¥–∞":
            bot.send_message(
                user_id,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 8 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª",
                reply_markup=done_inline_keyboard()
            )
            st["stage"] = "APP_TARIF_PHOTOS"
        elif text == "–Ω–µ—Ç":
            st["photos"] = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
            st["stage"] = STATE_APP_CONFIRM
            show_tarif_confirmation(user_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª")

    def show_tarif_confirmation(user_id):
        st = user_states[user_id]
        count = len(st.get("photos", []))
        operator = st.get("operator", "‚Äî")
        
        txt = (
            f"üì± <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî –¢–∞—Ä–∏—Ñ</b>\n"
            f"üîå –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: {st['title']}\n"
            f"üìÖ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {st['details']}\n"
            f"üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {count}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏? (–î–∞/–ù–µ—Ç) ‚úÖ‚ùå"
        )
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        
        bot.send_message(user_id, txt, parse_mode="HTML", reply_markup=markup)


    # === –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –•–≠–ù–î–õ–ï–† PHOTO ===
    @bot.message_handler(content_types=['photo'])
    def handle_app_photos(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states.get(user_id)

        if isinstance(st, dict):
            stage = st.get("stage")
        else:
            stage = st

        if stage == STATE_ADD_PHOTO_PROCESS:
            app_id = user_states.get((user_id, 'app_id'))
            new_photos = st.get("new_photos", [])

            # ‚úÖ –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
            existing_photos = get_application_photos(app_id)
            total_photos = len(existing_photos) + len(new_photos)

            if total_photos >= 8:
                bot.reply_to(msg, f"üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 8 —Ñ–æ—Ç–æ. –°–µ–π—á–∞—Å —É–∂–µ: {len(existing_photos)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, +{len(new_photos)} –Ω–æ–≤—ã—Ö.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            file_info = bot.get_file(msg.photo[-1].file_id)
            dl = bot.download_file(file_info.file_path)
            path = os.path.join(PHOTO_DIR, f"app_{app_id}_{file_info.file_unique_id}.jpg")

            with open(path, 'wb') as f:
                f.write(dl)

            new_photos.append(path)
            st["new_photos"] = new_photos

            reply = bot.reply_to(msg, f"‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(new_photos)} / {8 - len(existing_photos)} –¥–æ–±–∞–≤–ª–µ–Ω–æ).")
            threading.Timer(1.5, lambda: bot.delete_message(reply.chat.id, reply.message_id)).start()

        elif stage in ["APP_SOZHI_PHOTOS", "APP_TARIF_PHOTOS"]:
            if len(st.get("photos", [])) >= 8:
                bot.reply_to(msg, "–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ 8 —Ñ–æ—Ç–æ, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è. ‚ùå")
                return

            file_info = bot.get_file(msg.photo[-1].file_id)
            dl = bot.download_file(file_info.file_path)
            path = os.path.join(PHOTO_DIR, f"temp_{user_id}_{file_info.file_unique_id}.jpg")
            with open(path, 'wb') as f:
                f.write(dl)
            st["photos"].append(path)
            resp = bot.reply_to(msg, f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(st['photos'])}). üì∏")
            threading.Timer(1.5, lambda: bot.delete_message(resp.chat.id, resp.message_id)).start()

    # === –û–ë–ù–û–í–õ–Å–ù–ù–´–ô DONE HANDLER ===
    @bot.message_handler(commands=['done'])
    def done_creation_photos(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states.get(user_id, {})

        if isinstance(st, dict):
            if st.get("stage") == STATE_ADD_PHOTO_PROCESS:
                photos = st.get("new_photos", [])
                if len(photos) == 0:
                    bot.send_message(user_id, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. üì∑")
                    return

                app_id = user_states.get((user_id, 'app_id'))
                user_states[user_id] = STATE_CONFIRM_PHOTOS_SEND
                user_states[(user_id, 'photos_to_send')] = photos
                bot.send_message(user_id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(photos)} —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}?",
                                 reply_markup=confirm_keyboard())

            elif st.get("stage") in ["APP_SOZHI_PHOTOS", "APP_TARIF_PHOTOS"]:
                if len(st["photos"]) < 1:
                    bot.send_message(user_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ! üì∑")
                    return

                st["stage"] = STATE_APP_CONFIRM
                cat = st["category"]
                txt = (
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {st['title']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {st['details']}\n"
                    f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(st['photos'])}\n"
                    f"–¢–∏–ø –∑–∞—è–≤–∫–∏: {cat}\n\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏? (–î–∞/–ù–µ—Ç) ‚úÖ‚ùå"
                )
                bot.send_message(user_id, txt, reply_markup=confirm_keyboard())

    # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –§–û–¢–û (–ì–û–¢–û–í–û) ===
    
    @bot.message_handler(func=lambda msg: msg.text and msg.text.strip().lower().replace("‚úÖ", "").replace(".", "").replace("!", "").strip() in ["–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–æ"])
    def handle_ready_send_photos(msg):
        user_id = msg.from_user.id
        st = user_states.get(user_id)

        if not isinstance(st, dict):
            bot.send_message(user_id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.")
            return

        stage = st.get("stage")

        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        if stage == STATE_ADD_PHOTO_PROCESS:
            photos = st.get("new_photos", [])
            if not photos:
                bot.send_message(user_id, "‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                return

            app_id = user_states.get((user_id, 'app_id'))
            user_states[user_id] = STATE_CONFIRM_PHOTOS_SEND
            user_states[(user_id, 'photos_to_send')] = photos

            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_send_confirm"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="photos_send_cancel")
            )

            bot.send_message(user_id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(photos)} —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}?",
                            reply_markup=kb)

        # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        elif stage in ["APP_SOZHI_PHOTOS", "APP_TARIF_PHOTOS"]:
            photos = st.get("photos", [])
            if len(photos) < 1:
                bot.send_message(user_id, "‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ! üì∑")
                return

            st["stage"] = STATE_APP_CONFIRM
            cat = st["category"]
            txt = (
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {st['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {st['details']}\n"
                f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(photos)}\n"
                f"–¢–∏–ø –∑–∞—è–≤–∫–∏: {cat}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏? (–î–∞/–ù–µ—Ç) ‚úÖ‚ùå"
            )
            bot.send_message(user_id, txt, reply_markup=confirm_keyboard())

        else:
            bot.send_message(user_id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.")



    def save_temp_photo_for_review(app_id, user_id, path):
        key = (user_id, app_id)
        if key not in temp_photos_for_review:
            temp_photos_for_review[key] = []
        temp_photos_for_review[key].append(path)

    def approve_photos_for_application(app_id, user_id):
        key = (user_id, app_id)
        photos = temp_photos_for_review.get(key, [])
        for path in photos:
            add_application_photo(app_id, user_id, path)
        temp_photos_for_review.pop(key, None)

    def reject_photos_for_application(app_id, user_id):
        key = (user_id, app_id)
        temp_photos_for_review.pop(key, None)  # –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ



    @bot.callback_query_handler(func=lambda call: call.data == "photos_send_confirm")
    def confirm_photos_send(call):
        user_id = call.from_user.id
        app_id = user_states.get((user_id, 'app_id'))
        photos = user_states.get((user_id, 'photos_to_send'), [])

        if not app_id or not photos:
            bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞—è–≤–∫—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = get_user_data(user_id)
        caption = (
            f"üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{data.get('first_name', '')} {data.get('last_name', '')}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('phone', '')}</code>\n"
            f"ID: <code>{user_id}</code>\n"
            f"TG: @{data.get('username') or '(–Ω–µ—Ç)'}\n"
            f"–ö –∑–∞—è–≤–∫–µ: #{app_id}\n"
            f"–¢–∏–ø: {data.get('category', '–∫–≤–∞—Ä—Ç–∏—Ä–∞')}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        )

        # –ö–Ω–æ–ø–∫–∏ ‚Äú–ü—Ä–∏–Ω—è—Ç—å‚Äù / ‚Äú–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚Äù
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_photos_{user_id}_{app_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_photos_{user_id}_{app_id}")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(ADMIN_ID, caption, parse_mode="HTML", reply_markup=keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∑–∞–ª–ø–æ–º (–∞–ª—å–±–æ–º–æ–º)
        media = []
        for path in photos:
            with open(path, 'rb') as f:
                media.append(types.InputMediaPhoto(f.read()))
            save_temp_photo_for_review(app_id, user_id, path)

        bot.send_media_group(ADMIN_ID, media)

        bot.send_message(user_id, "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=my_applications_keyboard())

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        user_states[user_id] = STATE_NONE
        user_states.pop((user_id, 'app_id'), None)
        user_states.pop((user_id, 'photos_to_send'), None)

    

    @bot.callback_query_handler(func=lambda call: call.data.startswith("approve_photos_"))
    def approve_photos(call):
        try:
            parts = call.data.split("_")
            user_id = int(parts[2])
            app_id = int(parts[3])

            approve_photos_for_application(app_id, user_id)
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω—ã ‚úÖ")
            bot.send_message(call.message.chat.id, "‚úÖ –§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, f"‚úÖ –í–∞—à–∏ —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{app_id} –æ–¥–æ–±—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception as e:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
            print("–û—à–∏–±–∫–∞ –≤ approve_photos:", e)


    @bot.callback_query_handler(func=lambda call: call.data.startswith("reject_photos_"))
    def reject_photos(call):
        try:
            parts = call.data.split("_")
            user_id = int(parts[2])
            app_id = int(parts[3])

            reject_photos_for_application(app_id, user_id)
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã ‚ùå")
            bot.send_message(call.message.chat.id, "‚ùå –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, f"‚ùå –í–∞—à–∏ —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{app_id} –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception as e:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
            print("–û—à–∏–±–∫–∞ –≤ reject_photos:", e)


    @bot.callback_query_handler(func=lambda call: call.data == "photos_send_cancel")
    def cancel_photos_send(call):
        user_id = call.from_user.id
        bot.send_message(user_id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=my_applications_keyboard())
        user_states[user_id] = STATE_NONE
        user_states.pop((user_id, 'app_id'), None)
        user_states.pop((user_id, 'photos_to_send'), None)

    def send_photo_to_admin_review(user_id, app_id, path):
        from_main_user = get_user_data(user_id)
        fname = from_main_user.get("first_name", "")
        text = (
            f"üì∏ –§–æ—Ç–æ –æ—Ç <b>{fname}</b> –∫ –∑–∞—è–≤–∫–µ #{app_id}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"photo_ok:{path}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"photo_no:{path}")
        )

        with open(path, 'rb') as photo:
            bot.send_photo(ADMIN_ID, photo, caption=text, parse_mode="HTML", reply_markup=markup)

        PHOTO_REVIEW_PENDING[path] = (user_id, app_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("photo_ok:"))
    def approve_photo(call):
        path = call.data.split(":", 1)[1]
        if path not in PHOTO_REVIEW_PENDING:
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        user_id, app_id = PHOTO_REVIEW_PENDING.pop(path)
        add_application_photo(app_id, user_id, path)

        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ.")
        bot.edit_message_caption(
            caption="‚úÖ –§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(user_id, f"‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("photo_no:"))
    def reject_photo(call):
        path = call.data.split(":", 1)[1]
        if path not in PHOTO_REVIEW_PENDING:
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        user_id, app_id = PHOTO_REVIEW_PENDING.pop(path)
        if os.path.exists(path):
            os.remove(path)

        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        bot.edit_message_caption(
            caption="‚ùå –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(user_id, f"‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{app_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_send_photos")
    def cancel_send_photos(call):
        user_id = call.from_user.id
        bot.send_message(user_id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=my_applications_keyboard())
        user_states[user_id] = STATE_NONE
        user_states.pop((user_id, 'app_id'), None)
        user_states.pop((user_id, 'photos_to_send'), None)

    @bot.message_handler(func=lambda msg: msg.text and msg.text.strip().lower() in ["‚úÖ –≥–æ—Ç–æ–≤–æ"] and user_states.get(
        msg.from_user.id) == STATE_CONFIRM_PHOTOS_SEND)
    def confirm_photo_send(msg):
        user_id = msg.from_user.id
        app_id = user_states.get((user_id, 'app_id'))
        photos = user_states.get((user_id, 'photos_to_send'), [])

        data = get_user_data(user_id)
        caption = (
            f"üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{data.get('first_name', '')} {data.get('last_name', '')}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('phone', '')}</code>\n"
            f"ID: <code>{user_id}</code>\n"
            f"TG: @{data.get('username') or '(–Ω–µ—Ç)'}\n"
            f"–ö –∑–∞—è–≤–∫–µ: #{app_id}\n"
            f"–¢–∏–ø: {data.get('category', '–∫–≤–∞—Ä—Ç–∏—Ä–∞')}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        )

        bot.send_message(ADMIN_ID, caption, parse_mode="HTML")

        media = []
        for p in photos:
            with open(p, 'rb') as f:
                media.append(types.InputMediaPhoto(f.read()))
            add_application_photo(app_id, user_id, p)

        bot.send_media_group(ADMIN_ID, media)
        bot.send_message(user_id, "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=my_applications_keyboard())

        user_states[user_id] = STATE_NONE
        user_states.pop((user_id, 'app_id'), None)
        user_states.pop((user_id, 'photos_to_send'), None)

    @bot.message_handler(
        func=lambda msg: msg.text and msg.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "‚ùå–æ—Ç–º–µ–Ω–∞"] and user_states.get(
            msg.from_user.id) == STATE_CONFIRM_PHOTOS_SEND)
    def cancel_photo_confirmation(msg):
        user_id = msg.from_user.id
        bot.send_message(user_id, "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=my_applications_keyboard())
        user_states[user_id] = STATE_NONE
        user_states.pop((user_id, 'photos_to_send'), None)
        user_states.pop((user_id, 'app_id'), None)

    # === –û–¢–ú–ï–ù–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –§–û–¢–û ===
    @bot.message_handler(func=lambda msg: msg.text and msg.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "‚ùå–æ—Ç–º–µ–Ω–∞"])
    def cancel_photo_upload(msg):
        user_id = msg.from_user.id
        st = user_states.get(user_id)

        if isinstance(st, dict) and st.get("stage") == STATE_ADD_PHOTO_PROCESS:
            bot.send_message(user_id, "üö´ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.",
                             reply_markup=my_applications_keyboard())
            user_states[user_id] = STATE_NONE
            user_states.pop((user_id, 'app_id'), None)
            user_states.pop((user_id, 'photos_to_send'), None)
        else:
            bot.send_message(user_id, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

    @bot.callback_query_handler(func=lambda call: call.data == "photos_done")
    def handle_done_button(call):
        user_id = call.from_user.id
        msg = call.message

        bot.delete_message(msg.chat.id, msg.message_id)

        # –ü—Ä–æ—Å—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
        class FakeMessage:
            def __init__(self, user_id, chat_id):
                self.from_user = types.User(user_id, is_bot=False, first_name="User")
                self.chat = types.Chat(chat_id, "private")
                self.text = "/done"
                self.photo = None  # –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ

        fake_msg = FakeMessage(user_id, msg.chat.id)
        done_creation_photos(fake_msg)

    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict)
                                    and user_states[m.from_user.id].get("stage") == STATE_APP_CONFIRM)
    def confirm_app_creation(msg: types.Message):
        user_id = msg.from_user.id
        st = user_states[user_id]
        text = msg.text.lower()

        if text == "–¥–∞":
            cat = st["category"]
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if cat == "–∫–≤–∞—Ä—Ç–∏—Ä–∞":
                dist = st.get("district")
                if not dist:
                    bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω! –ë–µ–∑ —Ä–∞–π–æ–Ω–∞ –∑–∞—è–≤–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.")
                    return
                    
                new_id = create_application(user_id, cat, dist, None, st["title"], st["details"])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
                count = len(st.get("photos", []))
                txt = (
                    f"üè† <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî –ö–≤–∞—Ä—Ç–∏—Ä–∞</b>\n"
                    f"üìå –†–∞–π–æ–Ω: {dist}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {st['title']}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {st['details']}\n"
                    f"üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {count}\n\n"
                    "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!"
                )
                
            elif cat == "—Ç–∞—Ä–∏—Ñ":
                op = st.get("operator")
                if not op:
                    bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞! –ë–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞—è–≤–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.")
                    return
                    
                new_id = create_application(user_id, cat, None, op, st["title"], st["details"])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞
                count = len(st.get("photos", []))
                txt = (
                    f"üì± <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî –¢–∞—Ä–∏—Ñ</b>\n"
                    f"üîå –û–ø–µ—Ä–∞—Ç–æ—Ä: {op}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: {st['title']}\n"
                    f"üìÖ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {st['details']}\n"
                    f"üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {count}\n\n"
                    "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for p in st.get("photos", []):
                add_application_photo(new_id, user_id, p)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            notify_admin_new_application(user_id, new_id, st['title'], st['details'], cat)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            bot.send_message(
                user_id,
                txt,
                parse_mode="HTML",
                reply_markup=my_applications_keyboard()
            )
            
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è
            bot.send_message(
                user_id,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=my_applications_keyboard()
            )
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = STATE_NONE



    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_RATING_USER_ID)
    def handle_rating_id(msg: types.Message):
        user_id = msg.from_user.id
        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            role = get_user_data(user_id).get("role", "")
            bot.send_message(
                user_id,
                "–û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô",
                reply_markup=main_menu_keyboard(role=role)
            )
            user_states[user_id] = STATE_NONE
            return

        match = re.search(r'(\d+)', msg.text)
        if not match:
            bot.send_message(
                user_id,
                "–ù–µ –≤–∏–∂—É —á–∏—Å–ª–∞ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ ID (—á–∏—Å–ª–æ) –∏–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã. ‚ùì"
            )
            return

        target_id = int(match.group(1))
        user_states[(user_id, 'target_id')] = target_id
        user_states[user_id] = STATE_RATING_MESSAGE

        bot.send_message(
            user_id,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–æ—Ü–µ–Ω–∫—É</b> (—á–∏—Å–ª–æ 1‚Äì5) –∏ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä: ¬´5 –í—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—É–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å!¬ª\n"
            "–∏–ª–∏ ¬´3 –ú–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–ª–∏, –Ω–æ –ø–æ–º–æ–≥–ª–∏¬ª.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äì –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª.",
            parse_mode="HTML"
        )


    
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_RATING_MESSAGE)
    def handle_rating_message(msg: types.Message):
        user_id = msg.from_user.id
        text    = msg.text.strip()

        # ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –æ—Ç–º–µ–Ω–∞
        if text.lower() == "–Ω–∞–∑–∞–¥":
            role = get_user_data(user_id).get("role", "")
            bot.send_message(user_id, "–û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=main_menu_keyboard(role=role))
            user_states[user_id] = STATE_NONE
            return

        # –†–∞–∑–±–æ—Ä: –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —Ä–µ–π—Ç–∏–Ω–≥, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        parts = text.split(maxsplit=1)
        try:
            rating = float(parts[0].replace(",", "."))
        except (ValueError, IndexError):
            return bot.send_message(
                user_id,
                "–°–Ω–∞—á–∞–ª–∞ —á–∏—Å–ª–æ 1‚Äì5, –∑–∞—Ç–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n–ü—Ä–∏–º–µ—Ä: <b>4.5 –û—Ç–ª–∏—á–Ω–æ!</b>",
                parse_mode="HTML"
            )

        if rating < 1 or rating > 5:
            return bot.send_message(user_id, "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")

        comment   = parts[1].strip() if len(parts) > 1 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        target_id = user_states.get((user_id, "target_id"))

        # –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mod_id = str(uuid.uuid4())
        pending_moderations[mod_id] = {
            "rater":  user_id,
            "target": target_id,
            "rating": rating,
            "comment": comment
        }

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        text_to_admin = (
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç <code>{user_id}</code> –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <code>{target_id}</code>:\n\n"
            f"‚≠êÔ∏è <b>{rating}/5</b>\n"
            f"{comment}"
        )
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"mod_skip_{mod_id}"),
            InlineKeyboardButton("‚ö†Ô∏è –ü–µ—Ä–µ–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å", callback_data=f"mod_warn_{mod_id}")
        )

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º SUPPORT_ADMINS
        for adm in SUPPORT_ADMINS:
            bot.send_message(adm, text_to_admin, parse_mode="HTML", reply_markup=kb)

        # –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∞–≤—Ç–æ—Ä–∞
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=main_menu_keyboard(role=get_user_data(user_id).get("role",""))
        )
        user_states[user_id] = STATE_NONE


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ –æ—Ç–∑—ã–≤—É
    @bot.callback_query_handler(func=lambda c: re.match(r'^mod_(skip|warn)_[\w-]+$', c.data))
    def handle_comment_moderation(c: types.CallbackQuery):
        _, decision, mod_id = c.data.split("_", 2)
        data = pending_moderations.pop(mod_id, None)
        bot.answer_callback_query(c.id)

        if not data:
            return bot.send_message(c.from_user.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

        rater  = data["rater"]
        target = data["target"]
        rating = data["rating"]
        comment= data["comment"]

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        for adm in SUPPORT_ADMINS:
            if adm != c.from_user.id:
                bot.send_message(
                    adm,
                    f"‚ÑπÔ∏è –ê–¥–º–∏–Ω @{c.from_user.username} —É–∂–µ {'–ø—Ä–æ–ø—É—Å—Ç–∏–ª' if decision=='skip' else '—É–¥–∞–ª–∏–ª'} –æ—Ç–∑—ã–≤ {mod_id}."
                )

        if decision == "skip":
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
            save_rating(rater_id=rater, user_id=target, rating=rating, comment=comment)
            bot.send_message(rater, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        else:
            bot.send_message(rater, "‚ö†Ô∏è –í–∞—à –æ—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥ —Ä–∏—Å–∫–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

        # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –∞–¥–º–∏–Ω–∞
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        user_states.pop(rater, None)


    # ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ö–æ–º–∞–Ω–¥–∞ "–ü–æ–∏—Å–∫") ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    @bot.message_handler(func=lambda m: m.text == "–ü–æ–∏—Å–∫")
    def cmd_search(msg: types.Message):
        user_id = msg.from_user.id
        user_states[user_id] = STATE_SEARCH_CHOOSE_CAT
        bot.send_message(
            user_id,
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å? ¬´–ü–æ–∏—Å–∫ –ö–≤–∞—Ä—Ç–∏—Ä—ã¬ª –∏–ª–∏ ¬´–ü–æ–∏—Å–∫ –¢–∞—Ä–∏—Ñ¬ª? üîç",
            reply_markup=search_category_keyboard()
        )

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_SEARCH_CHOOSE_CAT)
    def search_cat(msg: types.Message):
        user_id = msg.from_user.id
        txt = msg.text.lower()
        if txt == "–ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã":
            bot.send_message(
                user_id,
                "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: üåç",
                reply_markup=get_district_keyboard()
            )
            user_states[user_id] = STATE_SEARCH_DISTRICT
        elif txt == "–ø–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ":
            bot.send_message(
                user_id,
                "–£–∫–∞–∂–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: üì±",
                reply_markup=get_operator_keyboard()
            )
            user_states[user_id] = STATE_SEARCH_OPERATOR
        elif txt == "–Ω–∞–∑–∞–¥":
            role = get_user_data(user_id).get("role", "")
            bot.send_message(user_id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üîô",
                            reply_markup=main_menu_keyboard(role=role))
            user_states[user_id] = STATE_NONE
        else:
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–æ–∏—Å–∫ –ö–≤–∞—Ä—Ç–∏—Ä—ã¬ª, ¬´–ü–æ–∏—Å–∫ –¢–∞—Ä–∏—Ñ¬ª –∏–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª. ‚ùì")


    # --- –ü–æ–∏—Å–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ö–≤–∞—Ä—Ç–∏—Ä–∞" ---
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_SEARCH_DISTRICT)
    def search_sozh_dist(msg: types.Message):
        user_id = msg.from_user.id
        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(user_id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞. ‚Ü©Ô∏è",
                            reply_markup=search_category_keyboard())
            user_states[user_id] = STATE_SEARCH_CHOOSE_CAT
            return

        dist = msg.text.strip()
        with sqlite3.connect(DB_NAME) as conn:
            c = conn.cursor()
            c.execute("""
                SELECT a.id, a.title, a.details, a.user_id
                FROM applications a
                WHERE a.category='–∫–≤–∞—Ä—Ç–∏—Ä–∞'
                AND a.district=?
                AND a.status='approved'
            """, (dist,))
            rows = c.fetchall()

        if not rows:
            bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ. üòï")
            role = get_user_data(user_id).get("role", "")
            bot.send_message(user_id, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
                            reply_markup=main_menu_keyboard(role=role))
            user_states[user_id] = STATE_NONE
        else:
            user_states[user_id] = {
                "stage":    STATE_SHOW_SEARCH_RESULTS,
                "results":  rows,
                "index":    0,
                "category": "–∫–≤–∞—Ä—Ç–∏—Ä–∞"
            }
            show_current_result(user_id)


    @bot.callback_query_handler(func=lambda call: call.data.startswith(("approve_", "reject_")))
    def handle_admin_approve_reject(call):
        app_id = int(call.data.split("_")[1])

        if call.data.startswith("approve_"):
            new_status = "approved"
            status_text = "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
        elif call.data.startswith("reject_"):
            new_status = "rejected"
            status_text = "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"

        set_application_status(app_id, new_status)

        bot.answer_callback_query(call.id, status_text)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ó–∞—è–≤–∫–∞ #{app_id}: {status_text}",
            reply_markup=None
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("SELECT user_id FROM applications WHERE id=?", (app_id,))
        row = c.fetchone()
        conn.close()

        if row:
            user_id = row[0]
            bot.send_message(user_id, f"{status_text} –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("revise_"))
    def handle_revise_with_comment(call):
        app_id = int(call.data.split("_")[1])
        user_states[(call.from_user.id, 'revise_app')] = app_id
        bot.send_message(call.from_user.id, f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}:")

    @bot.message_handler(func=lambda m: (m.from_user.id, 'revise_app') in user_states)
    def handle_revise_comment(msg: types.Message):
        admin_id = msg.from_user.id
        app_id = user_states.pop((admin_id, 'revise_app'))
        comment = msg.text.strip()

        set_application_status(app_id, "revise")

        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("SELECT user_id FROM applications WHERE id=?", (app_id,))
        row = c.fetchone()
        conn.close()

        if row:
            user_id = row[0]
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n<b>{comment}</b>",
                parse_mode="HTML"
            )
            bot.send_message(admin_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")



    # --- –ü–æ–∏—Å–∫ –¢–∞—Ä–∏—Ñ ---
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_SEARCH_OPERATOR)
    def search_tarif(msg: types.Message):
        user_id = msg.from_user.id

        # –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
        if msg.text.lower() == "–Ω–∞–∑–∞–¥":
            bot.send_message(
                user_id,
                "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞. ‚Ü©Ô∏è",
                reply_markup=search_category_keyboard()
            )
            user_states[user_id] = STATE_SEARCH_CHOOSE_CAT
            return

        op = msg.text.strip()
        # –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ –ë–î –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ ¬´—Ç–∞—Ä–∏—Ñ¬ª –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        with sqlite3.connect(DB_NAME) as conn:
            c = conn.cursor()
            c.execute("""
                SELECT a.id, a.operator, a.title, a.details, a.user_id
                FROM applications a
                WHERE a.category='—Ç–∞—Ä–∏—Ñ'
                AND a.operator=?
                AND a.status='approved'
            """, (op,))
            rows = c.fetchall()

        if not rows:
            bot.send_message(user_id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. üòï")
            bot.send_message(
                user_id,
                "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
                reply_markup=main_menu_keyboard(role=get_user_data(user_id).get("role",""))
            )
            user_states[user_id] = STATE_NONE
        else:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            user_states[user_id] = {
                "stage":    STATE_SHOW_SEARCH_RESULTS,
                "results":  rows,
                "index":    0,
                "category": "—Ç–∞—Ä–∏—Ñ"
            }
            show_current_result(user_id)


    # ---------- –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ----------
    def show_current_result(user_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ '–∫–≤–∞—Ä—Ç–∏—Ä–∞', –∏ '—Ç–∞—Ä–∏—Ñ'.
        """
        st = user_states.get(user_id)
        if not isinstance(st, dict):
            return

        results = st["results"]
        idx     = st["index"]
        cat     = st.get("category", "–∫–≤–∞—Ä—Ç–∏—Ä–∞")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞—Ä—Ç–∏—Ä–∞

        # –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        if idx < 0 or idx >= len(results):
            bot.send_message(user_id, "–ó–∞—è–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! ‚ö†Ô∏è")
            bot.send_message(
                user_id,
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
                reply_markup=main_menu_keyboard(role=get_user_data(user_id).get("role",""))
            )
            user_states[user_id] = STATE_NONE
            return

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if cat == "—Ç–∞—Ä–∏—Ñ":
            app_id, op, title, details, owner_id = results[idx]
            header = (
                f"üì± <b>–¢–∞—Ä–∏—Ñ</b>\n"
                f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {op}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {title}\n"
                f"üìÖ –û–ø–ª–∞—Ç–∞: {details}"
            )
        else:  # –∫–≤–∞—Ä—Ç–∏—Ä–∞
            app_id, title, details, owner_id = results[idx]
            header = (
                f"üè† <b>–ö–≤–∞—Ä—Ç–∏—Ä–∞</b>\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {title}\n"
                f"üìù –î–µ—Ç–∞–ª–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {details}"
            )

        # 1) –§–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        photos = get_application_photos(app_id)
        if photos:
            media = []
            for p in photos:
                if os.path.exists(p):
                    media.append(types.InputMediaPhoto(open(p, 'rb')))
            if media:
                bot.send_media_group(user_id, media)

        # 2) –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{app_id}\n\n{header}"

        # 3) –ê–≤—Ç–æ—Ä –∏ —Ä–µ–π—Ç–∏–Ω–≥
        if owner_id == user_id:
            text += "\n\n–ê–≤—Ç–æ—Ä: –≤—ã"
        else:
            uo = get_user_data(owner_id)
            name = f"{uo.get('first_name','')} {uo.get('last_name','')}".strip() or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"\n\n–ê–≤—Ç–æ—Ä: {name}"

        avg = get_average_rating(owner_id)
        if avg:
            full, half = int(avg), (avg - int(avg) >= 0.5)
            stars = "‚òÖ"*full + ("¬Ω" if half else "")
            text += f"\n\n<b>–†–µ–π—Ç–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞:</b> {stars} ({avg:.1f}/5)"
        else:
            text += "\n\n<b>–†–µ–π—Ç–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞:</b> –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"

        # 4) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"
        if owner_id == user_id:
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("–î–∞–ª—å—à–µ", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
            kb.add("–ù–∞–∑–∞–¥")
        else:
            kb = get_search_actions_keyboard()

        bot.send_message(
            user_id,
            text,
            parse_mode="HTML",
            reply_markup=kb
        )



    # –í—Ö–æ–¥ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É    
    @bot.message_handler(func=lambda m: m.text == "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    def support_entry(msg: types.Message):
        user_id = msg.from_user.id
        user_states[user_id] = STATE_SUPPORT_CHAT

        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–ù–∞–∑–∞–¥")

        bot.send_message(
            user_id,
            "‚úâÔ∏è –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª.",
            reply_markup=kb
        )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    @bot.message_handler(func=lambda msg: user_states.get(msg.from_user.id) == STATE_SUPPORT_CHAT, content_types=['text', 'photo'])
    def forward_to_support(msg: types.Message):
        user_id = msg.from_user.id

        # –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if msg.text and msg.text.lower() == "–Ω–∞–∑–∞–¥":
            user_states[user_id] = None
            bot.send_message(user_id, "üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.", reply_markup=types.ReplyKeyboardRemove())
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é)
        data = get_user_data(user_id)
        username = data.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        header = (
            f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n"
            f"üë§ {data.get('first_name', '')} {data.get('last_name', '')}\n"
            f"üÜî <code>{user_id}</code>\n"
            f"üîó @{username}\n\n"
        )
        text = msg.caption if msg.caption else msg.text or ""

        for admin_id in SUPPORT_ADMINS:
            support_active_chats[admin_id] = user_id
            try:
                if msg.content_type == 'text':
                    bot.send_message(admin_id, header + text, parse_mode="HTML")

                elif msg.content_type == 'photo':
                    file_info = bot.get_file(msg.photo[-1].file_id)
                    downloaded_file = bot.download_file(file_info.file_path)

                    temp_path = f"temp_{user_id}.jpg"
                    with open(temp_path, 'wb') as f:
                        f.write(downloaded_file)

                    with open(temp_path, 'rb') as photo:
                        bot.send_photo(admin_id, photo, caption=header + text, parse_mode="HTML")

                    os.remove(temp_path)

            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        bot.send_message(user_id, "üì® –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    # –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    @bot.message_handler(func=lambda m: m.from_user.id in SUPPORT_ADMINS, content_types=['text', 'photo'])
    def handle_admin_reply(msg: types.Message):
        admin_id = msg.from_user.id
        user_id = support_active_chats.get(admin_id)

        if not user_id:
            bot.send_message(admin_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return

        try:
            if msg.content_type == 'text':
                bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {msg.text}")

            elif msg.content_type == 'photo':
                file_info = bot.get_file(msg.photo[-1].file_id)
                downloaded_file = bot.download_file(file_info.file_path)

                temp_path = f"admin_reply_{admin_id}.jpg"
                with open(temp_path, 'wb') as f:
                    f.write(downloaded_file)

                with open(temp_path, 'rb') as photo:
                    bot.send_photo(user_id, photo, caption="üì¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")

                os.remove(temp_path)

            # –£–≤–µ–¥–æ–º–∏–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
            for other_admin in SUPPORT_ADMINS:
                if other_admin != admin_id:
                    bot.send_message(other_admin, f"‚ö†Ô∏è –ê–¥–º–∏–Ω {admin_id} –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

            support_active_chats.pop(admin_id, None)

        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 403:
                bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            else:
                bot.send_message(admin_id, f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")


    # ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    @bot.message_handler(func=lambda m:
        isinstance(user_states.get(m.from_user.id), dict)
        and user_states[m.from_user.id].get("stage") == STATE_SHOW_SEARCH_RESULTS
    )
    def handle_search_results_buttons(msg: types.Message):
        user_id = msg.from_user.id
        text    = msg.text.strip().lower()
        st      = user_states[user_id]
        idx     = st["index"]
        cat     = st.get("category", "–∫–≤–∞—Ä—Ç–∏—Ä–∞")

        # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
        if cat == "—Ç–∞—Ä–∏—Ñ":
            app_id, op, title, details, owner_id = st["results"][idx]
        else:
            app_id, title, details, owner_id = st["results"][idx]

        # –µ—Å–ª–∏ —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç–∫–ª–∏–∫/–æ—Ç–∑—ã–≤
        if owner_id == user_id and text in ("–æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è", "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
            return bot.send_message(user_id, "‚ùå –≠—Ç–æ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Äî –Ω–µ–ª—å–∑—è.")

        # ¬´–î–∞–ª—å—à–µ¬ª
        if text == "–¥–∞–ª—å—à–µ":
            st["index"] += 1
            return show_current_result(user_id)

        # ¬´–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è¬ª
        if text == "–æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è":
            add_response(user_id, owner_id, app_id)
            od = get_user_data(owner_id)
            return bot.send_message(
                user_id,
                f"–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞—è–≤–∫—É #{app_id}.\n"
                f"–ò–º—è: {od.get('first_name','')} {od.get('last_name','')}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {od.get('phone','')}\n\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é! üìû"
            )

        # ¬´–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª
        if text == "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
            user_states[(user_id, 'return_after_rating')] = STATE_SHOW_SEARCH_RESULTS
            user_states[(user_id, 'search_backup')]       = {"results": st["results"], "index": idx, "category": cat}
            user_states[user_id]                          = STATE_RATING_MESSAGE
            user_states[(user_id, 'target_id')]           = owner_id
            return bot.send_message(
                user_id,
                "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É (1‚Äì5) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: ¬´4.5 –û—Ç–ª–∏—á–Ω–æ –ø–æ–º–æ–≥!¬ª\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî ¬´–ù–∞–∑–∞–¥¬ª. ‚úçÔ∏è",
                parse_mode="HTML"
            )

        # ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã¬ª
        if text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã":
            reviews = get_ratings_for_user(owner_id)
            if not reviews:
                return bot.send_message(user_id, "–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç. üòï")
            out = "<b>–û—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            for _rid, rater_id, score, comment in reviews:
                u = get_user_data(rater_id)
                name = f"{u.get('first_name','')} {u.get('last_name','')}".strip()
                full = int(score); half = (score - full) >= 0.5
                stars = "‚òÖ"*full + ("¬Ω" if half else "")
                out += f"<b>{name}</b>\n{stars} ({score}/5)\n{comment}\n\n"
            return bot.send_message(user_id, out, parse_mode="HTML")

        # ¬´–ù–∞–∑–∞–¥¬ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if text == "–Ω–∞–∑–∞–¥":
            bot.send_message(user_id, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üè†",
                            reply_markup=main_menu_keyboard(role=get_user_data(user_id).get("role","")))
            user_states[user_id] = STATE_NONE
            return

        # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")


    # Fallback ‚Äì –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ 
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_NONE)
    def fallback(msg: types.Message):
        user_id = msg.from_user.id
        data = get_user_data(user_id) or {}
        role = data.get("role", "")
        bot.send_message(
            user_id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start. ‚ùì",
            reply_markup=main_menu_keyboard(role=role)
        )
        
    # Callback –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ

    @bot.callback_query_handler(func=lambda call: call.data.startswith("del_photo_"))
    def delete_single_photo(call):
        user_id = call.from_user.id
        app_id = user_states.get((user_id, 'app_id'))
        idx = int(call.data.split("_")[-1])
        photos = get_application_photos(app_id)

        if 0 <= idx < len(photos):
            path = photos[idx]
            if os.path.exists(path):
                os.remove(path)
            with sqlite3.connect(DB_NAME) as conn:
                conn.execute("DELETE FROM application_photos WHERE application_id=? AND file_path=?", (app_id, path))
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ.")
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @bot.callback_query_handler(func=lambda call: call.data == "del_all_request")
    def confirm_delete_all(call):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="del_all_confirm"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="del_all_cancel")
        )
        bot.edit_message_text(
            "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "del_all_confirm")
    def do_delete_all(call):
        user_id = call.from_user.id
        app_id = user_states.get((user_id, 'app_id'))
        photos = get_application_photos(app_id)
        for p in photos:
            if os.path.exists(p):
                os.remove(p)
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("DELETE FROM application_photos WHERE application_id=?", (app_id,))
        bot.edit_message_text("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "del_all_cancel")
    def cancel_delete_all(call):
        bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    # –í—ã–≤–æ–¥ —Ñ–æ—Ç–æ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    def send_photo_delete_options(bot, user_id, app_id):
        photos = get_application_photos(app_id)
        for idx, path in enumerate(photos):
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ", callback_data=f"del_photo_{idx}"))
            with open(path, "rb") as photo:
                bot.send_photo(user_id, photo, caption=f"üì∏ –§–æ—Ç–æ ‚Ññ{idx + 1}", reply_markup=markup)

        confirm_all = InlineKeyboardMarkup()
        confirm_all.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="del_all_request"))
        bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?", reply_markup=confirm_all)

    
    @bot.message_handler(func=lambda m: m.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
    def handle_view_ratings(msg: types.Message):
        user_id = msg.from_user.id
        reviews = get_ratings_for_user(user_id)

        if not reviews:
            bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
            return

        out = "<b>–û—Ç–∑—ã–≤—ã –æ –≤–∞—Å:</b>\n\n"
        for _rid, rater_id, score, comment in reviews:
            u = get_user_data(rater_id)
            name = f"{u.get('first_name','')} {u.get('last_name','')}".strip()
            full = int(score)
            half = (score - full) >= 0.5
            stars = "‚òÖ"*full + ("¬Ω" if half else "")
            out += f"<b>{name}</b>\n{stars} ({score}/5)\n{comment}\n\n"

        bot.send_message(user_id, out, parse_mode="HTML")


    @bot.message_handler(func=lambda m: m.text.lower() == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤")
    def ask_which_rating_to_edit(msg: types.Message):
        user_id = msg.from_user.id
        ratings = get_ratings_by_user(user_id)

        if not ratings:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        for rid, rater, score, comment in ratings:
            stars = "‚òÖ" * int(score)
            text += f"#{rid} ‚Äî {stars} ({score}/5)\n{comment}\n\n"

        bot.send_message(user_id, text, parse_mode="HTML")
        user_states[user_id] = STATE_EDIT_RATING_SELECT


    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == STATE_EDIT_RATING_SELECT)
    def get_rating_id_to_edit(msg: types.Message):
        user_id = msg.from_user.id
        text = msg.text.strip().lstrip('#')
        if not text.isdigit():
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞.")
            return

        rating_id = int(text)
        user_states[user_id] = {
            "stage": STATE_EDIT_RATING_INPUT,
            "rating_id": rating_id
        }

        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1‚Äì5) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä:\n<b>4.5 –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü</b>", parse_mode="HTML")



    @bot.message_handler(func=lambda m: isinstance(user_states.get(m.from_user.id), dict) and user_states[m.from_user.id].get("stage") == STATE_EDIT_RATING_INPUT)
    def process_rating_edit(msg: types.Message):
        user_id = msg.from_user.id
        parts = msg.text.strip().split(maxsplit=1)
        if len(parts) < 2:
            bot.send_message(
                user_id,
                "–í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫—É, –ø–æ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä:\n<b>4 –í—Å—ë –æ–∫</b>",
                parse_mode="HTML"
            )
            return

        # –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
        try:
            rating = float(parts[0].replace(",", "."))
        except ValueError:
            bot.send_message(user_id, "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ù–∞–ø—Ä–∏–º–µ—Ä: 4.5")
            return

        comment = parts[1].strip()
        if rating < 1 or rating > 5:
            bot.send_message(user_id, "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
        rating_id = user_states[user_id]["rating_id"]
        update_rating(rating_id, rating, comment)

        # --- –ù–û–í–´–ô –ë–õ–û–ö: –≤—ã–≤–æ–¥–∏–º –∏–º–µ–Ω–Ω–æ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã ---
        reviews = get_ratings_by_user(user_id)
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤:</b>\n\n"
        for rid, target_id, score, comm in reviews:
            # –∑–≤—ë–∑–¥–æ—á–∫–∏
            full = int(score)
            half = (score - full) >= 0.5
            stars = "‚òÖ" * full + ("¬Ω" if half else "")

            # –∏–º—è —Ç–æ–≥–æ, –∫–æ–º—É –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤
            u = get_user_data(target_id)
            name = f"{u.get('first_name','')} {u.get('last_name','')}".strip() or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            text += f"#{rid} ‚Äî –æ—Ç–∑—ã–≤ –æ <b>{name}</b>: {stars} ({score}/5)\n{comm}\n\n"

        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", "–ù–∞–∑–∞–¥")

        bot.send_message(user_id, text, parse_mode="HTML", reply_markup=kb)
        user_states[user_id] = STATE_NONE
